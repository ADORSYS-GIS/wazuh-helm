{{- with .Values.secretjob }}
{{- if .enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.fullname" $ }}-one-time-job
  namespace: {{ include "common.names.namespace" $ }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "4"
    {{ include "common.annotations.standard" ( dict "customAnnotations" .additionalAnnotations "context" $ ) | nindent 4 }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .additionalLabels "context" $ ) | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: {{ include "common.names.fullname" $ }}-job-secret
      restartPolicy: Never
      volumes:
        - name: certificates
          emptyDir: { }
        - name: config
          emptyDir: { }
      initContainers:
        - name: cert-generator
          {{ $imageTpl := include "common.images.image" (dict "imageRoot" .image "global" $.Values.global) }}
          image: {{ include "common.tplvalues.render" (dict "value" $imageTpl "context" $) | quote }}
          workingDir: /certificates
          volumeMounts:
            - mountPath: /certificates
              name: certificates
          command:
            - /bin/bash
            - -c
            - |
              echo "Writing script into /gen_sh.sh"
              echo {{ include "wazuh.cert_script" $ | quote }} > /gen_sh.sh
              bash /gen_sh.sh
      containers:
        - name: secret-creator
          {{ $secretImageTpl := include "common.images.image" (dict "imageRoot" .secretImage "global" $.Values.global) }}
          image: {{ include "common.tplvalues.render" (dict "value" $secretImageTpl "context" $) | quote }}
          volumeMounts:
            - mountPath: /certificates
              name: certificates
          command:
            - /bin/sh
            - -c
            - |
              echo "Creating secret from certificates folder..."
              SECRET_NAME={{ include "common.names.fullname" $ }}-certificates
              NAMESPACE={{ include "common.names.namespace" $ }}
              TEMP_DIR="/certificates/"

              echo "Listing files in $TEMP_DIR"
              ls -la $TEMP_DIR

              echo "Check if directory exists"
              if [ -d "$TEMP_DIR" ]; then
                echo "Build the kubectl command dynamically"
                kubectl create secret generic $SECRET_NAME --from-file=$TEMP_DIR -n $NAMESPACE
                echo "Secret $SECRET_NAME created successfully."
              else
                echo "Directory $TEMP_DIR does not exist or is empty!"
                exit 1
              fi
{{- end }}
{{- end }}