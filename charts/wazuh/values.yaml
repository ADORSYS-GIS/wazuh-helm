global:
  ##
  ##
  domain: wazuh.example.com
  ##
  ##
  version: "4.13.0"
  ##
  ##
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: [ ]
  ## @param storageClass Default StorageClass for persistent volume claims
  ##
  storageClassName: ~

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname template
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed resources
##
commonLabels: { }
## @param commonAnnotations Annotations to add to all deployed resources
##
commonAnnotations:
  "kubernetes.io/description": '{{ include "common.names.fullname" $ }} cluster'

##
##
storageClasses:
  '{{ include "wazuh.storageClassName" $ }}':
    ##
    ##
    enabled: true
    ##
    ##
    name: ""
    ##
    ##
    additionalAnnotations: { }
    ##
    ##
    additionalLabels: { }
    ##
    ##
    provisioner: ""
    ##
    ##
    parameters: { }
    ##
    ##
    volumeBindingMode: ""
    ##
    ##
    reclaimPolicy: Delete

##
##
apiCred:
  ##
  ##
  authSecret: ~
  ##
  ##
  auth:
    ##
    ##
    username: wazuh-wui
    ##
    ##
    password: "9Y0m^%^Cx4zx@6=X"

secretjob:
  enabled: true
  additionalAnnotations:
    "helm.sh/hook": pre-install
  additionalLabels: { }
  image:
    ##
    ##
    registry: docker.io
    ##
    ##
    repository: alpine
    ##
    ##
    tag: latest
    ##
    ##
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]
  ##
  ##
  secretImage:
    ##
    ##
    registry: docker.io
    ##
    ##
    repository: bitnamilegacy/kubectl
    ##
    ##
    tag: latest
    ##
    ##
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]
  ##
  ##
  serviceAccount:
    ##
    ##
    name: wazuh-certs

indexer:
  ##
  ##
  replicas: 2
  ##
  ##
  nameOverride: ""
  ##
  ##
  image:
    ##
    ##
    registry: docker.io
    ##
    ##
    repository: wazuh/wazuh-indexer
    ##
    ##
    tag: '{{ .Values.global.version }}'
    ##
    ##
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]

  ##
  ##
  authSecret: ~

  ##
  ##
  auth:
    ##
    ##
    username: admin
    ##
    ##
    password: "rU40Fm%0GnKÂ£iqQN"
  
  ##
  ##
  keycloak:
    ##
    ##
    enabled: true
    ##
    ##
    roles_key: wazuh_roles
    ##
    ##
    subject_key: preferred_username
    ##
    ##
    openid_connect_url: "https://<keycloak-url>/realms/<realm>/.well-known/openid-configuration"
    ##
    ##
    client_id: ~
    ##
    ##
    client_secret: ~
    ##
    ##
    scope: ~
    ##
    ##
    base_redirect_url: ~
    ##
    ##
    roles_mapping: ~
    ##
    ##
    roles: ~
    ##
    ##
    tenants: ~

  ##
  ##
  service:
    ##
    ##
    api:
      ##
      ##
      type: ClusterIP
      ##
      ##
      annotations: { }
    ##
    ##
    main:
      ##
      ##
      type: ClusterIP
      ##
      ##
      annotations: { }
  ##
  ##
  persistence:
    ##
    ##
    size: 500Mi
    ##
    ##
    storageClassName: ~
    ##
    ##
    accessModes:
      - ReadWriteOnce
  ##
  ##
  updateStrategy:
    ##
    ##
    type: RollingUpdate
  ##
  ##
  envFrom: [ ]
  ##
  ##
  env:
    - name: OPENSEARCH_JAVA_OPTS
      value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ##
  ##
  volumes: [ ]
  ##
  ##
  volumeMounts: [ ]
  ##
  ##
  resources: ~

  ##
  ##
  affinity: ~

##
##
worker:
  ##
  ##
  additionalAnnotations: { }
  ##
  ##
  additionalLabels: { }
  ##
  ##
  replicaCount: 2
  ##
  ##
  updateStrategy:
    type: RollingUpdate
  ##
  ##
  nameOverride: ""
  ##
  ##
  image:
    ##
    ##
    registry: docker.io
    ##
    ##
    repository: wazuh/wazuh-manager
    ##
    ##
    tag: '{{ .Values.global.version }}'
    ##
    ##
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]

  ##
  ##
  volumeMounts: [ ]

  ##
  ##
  initContainers: { }
  ##
  ##
  env: [ ]
  ##
  ##
  envFrom: [ ]
  ##
  ##
  volumes:
    - name: manager-backup
      persistentVolumeClaim:
        claimName: '{{ include "common.names.fullname" $ }}-manager-backup'
  ##
  ##
  podManagementPolicy: Parallel

  ##
  ##
  persistence:
    ##
    ##
    size: 200Mi
    ##
    ##
    storageClassName: ~
    ##
    ##
    accessModes:
      - ReadWriteOnce

  resources: ~

  ##
  ##
  affinity: ~

master:
  replicaCount: 1
  ##
  ##
  nameOverride: ""
  ##
  ##
  image:
    registry: docker.io
    repository: wazuh/wazuh-manager
    tag: '{{ .Values.global.version }}'
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]
  ##
  ##
  additionalAnnotations: { }
  ##
  ##
  additionalLabels: { }

  ##
  ##
  ingress:
    ##
    ##
    enabled: false
    ##
    ##
    name: "wazuh-master"
    ##
    ##
    className: ""
    ##
    ##
    annotations: { }
    ##
    ##
    host: "{{ .Values.global.domain }}"
    ##
    ##
    tls: true

    additionalLabels: { }

  ##
  ##
  podManagementPolicy: Parallel

  ##
  ##
  updateStrategy:
    type: RollingUpdate
  ##
  initContainers: { }
  ##
  ##
  env: [ ]
  ##
  ##
  envFrom: [ ]
  ##
  ##
  volumes:
    - name: manager-backup
      persistentVolumeClaim:
        claimName: '{{ include "common.names.fullname" $ }}-manager-backup'
    - name: snort-alerts
      persistentVolumeClaim:
        claimName: snort-alerts
    - name: owasp-zap-alerts
      persistentVolumeClaim:
        claimName: owasp-zap-alerts

  volumeMounts:
    - name: snort-alerts
      mountPath: /var/log/snort/
    - name: owasp-zap-alerts
      mountPath: /var/log/owasp-zap/

  resources: ~

  persistence:
    ##
    ##
    size: 10Gi
    ##
    ##
    storageClassName: ~
    ##
    ##
    accessModes:
      - ReadWriteOnce

  ##
  ##
  affinity: ~

##
##
extraVolumeConfigs:
  '{{ include "common.names.fullname" $ }}-manager-backup':
    enabled: true
    additionalAnnotations: { }
    additionalLabels: { }
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 500Mi
    storageClassName: ~
    dataSource: ~
    volumeName: ~
    volumeMode: ~
    volumeAttributesClassName: ~
    dataSourceRef: ~
    selector: ~
  snort-alerts:
    storageClassName: ~
    enabled: true
    additionalAnnotations: { }
    additionalLabels: { }
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 200Mi
  owasp-zap-alerts:
    storageClassName: ~
    enabled: true
    additionalAnnotations: { }
    additionalLabels: { }
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 200Mi

##
##
dashboard:
  ##
  ##
  nameOverride: ""
  ##
  ##
  image:
    ##
    ##
    registry: docker.io
    ##
    ##
    repository: wazuh/wazuh-dashboard
    tag: '{{ .Values.global.version }}'
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]

  ##
  ##
  additionalAnnotations: { }
  additionalLabels: { }
  resources: ~

  ##
  ##
  authSecret: ~
  ##
  ##
  auth:
    ##
    ##
    username: kibanaserver
    ##
    ##
    password: "mS05mw_0a?-nMGfM"
  ##
  ##
  ingress:
    ##
    ##
    additionalLabels: { }
    ##
    ##
    enabled: false
    ##
    ##
    name: "wazuh-dashboard"
    ##
    ##
    className: ""
    ##
    ##
    annotations: { }
    ##
    ##
    host: "{{ .Values.global.domain }}"
    ##
    ##
    port: 5601
  ports:
    - containerPort: 5601
      name: dashboard
  volumes: [ ]
  volumeMounts: [ ]
  env:
    - name: OPENSEARCH_JAVA_OPTS
      value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  envFrom: [ ]
  ## @branding more at https://opensearch.org/docs/latest/dashboards/branding/
  ## 
  branding:
    logo:
      defaultUrl: "https://adorsys.com/wp-content/themes/adorsys/favicons/favicon.svg"
    #  darkModeUrl: "https://example.com/dark-mode-sample.svg"
    mark:
      defaultUrl: "https://adorsys.com/wp-content/themes/adorsys/favicons/favicon.svg"
    #   darkModeUrl: ""
    loadingLogo:
      defaultUrl: "https://adorsys.com/wp-content/themes/adorsys/favicons/favicon.svg"
    #   darkModeUrl: ""
    faviconUrl: "https://adorsys.com/wp-content/themes/adorsys/favicons/favicon.svg"
    applicationTitle: "Wazuh | Adorsys"
    useExpandedHeader: false


svcs:
  ##
  ##
  '{{ include "common.names.fullname" $ }}':
    ##
    ##
    enabled: true

    ##
    ##
    type: LoadBalancer

    ##
    ##
    additionalLabels: { }

    ##
    ##
    annotations: { }

    ##
    ##
    loadBalancerClass: ""

    ##
    ##
    clusterIP: ~

    ##
    ##
    loadBalancerIP: ~

    ##
    ##
    allocateLoadBalancerNodePorts: ~

    ##
    ##
    selector:
      app: '{{ include "common.names.fullname" $ }}-manager'
      node-type: master

    ports:
      - name: api
        port: 55000
        targetPort: api
        protocol: TCP
      - name: registration
        port: 1515
        targetPort: registration
        protocol: TCP

  ##
  ##
  '{{ include "common.names.fullname" $ }}-worker':
    ##
    ##
    enabled: true

    ##
    ##
    type: LoadBalancer

    ##
    ##
    additionalLabels: { }

    ##
    ##
    annotations: { }

    ##
    ##
    loadBalancerClass: ""

    ##
    ##
    ports:
      - name: agents-events
        port: 1514
        targetPort: agents-events
        protocol: TCP

    ##
    ##
    selector:
      app: '{{ include "common.names.fullname" $ }}-manager'
      node-type: worker

  ##
  ##
  '{{ include "common.names.fullname" $ }}-cluster':
    ##
    ##
    enabled: true

    ##
    ##
    type: ClusterIP

    ##
    ##
    additionalLabels: { }

    ##
    ##
    annotations: { }

    ##
    ##
    loadBalancerClass: ""

    ##
    ##
    selector:
      app: '{{ include "common.names.fullname" $ }}-manager'

    ##
    ##
    clusterIP: None

    ##
    ##
    ports:
      - name: cluster
        port: 1516
        protocol: TCP
        targetPort: cluster

  ##
  ##
  '{{ include "common.names.fullname" $ }}-dashboard':
    ##
    ##
    enabled: true

    ##
    ##
    type: ClusterIP

    ##
    ##
    additionalLabels: { }

    ##
    ##
    annotations: { }

    ##
    ##
    loadBalancerClass: ""

    ##
    ##
    selector:
      ##
      ##
      app: '{{ include "common.names.fullname" $ }}-dashboard'

    ##
    ##
    clusterIP: ~

    ##
    ##
    ports:
      - name: dashboard
        port: 5601
        protocol: TCP
        targetPort: 5601

##
##
cluster:
  ##
  ##
  secret:
    ##
    ##
    enabled: true
  
  ##
  ##
  secretName: ~
  ##
  ##
  rootCaSecretName: "example-secret-name"
  ##
  ##
  auth:
    ##
    ##
    key: "dfbb2c1b9d679c39af94d5c1c821c952"
  
  ##
  ##
  config:
    ##
    ##
    smtp:
      ##
      ##
      server: smtp.example.wazuh.com
      ##
      ##
      from: ossecm@example.wazuh.com
      ##
      ##
      to: recipient@example.wazuh.com
      ##
      ##
      max_per_hour: 12
  
  ##
  ##
  ## rules:
  ##    "rules.miaou.xml": |
  ##      <group name="miaou,">
  ##        <rule id="100000" level="3">
  ##          <decoded_as>miaou</decoded_as>
  ##          <description>miaou</description>
  ##          <field name="program">miaou</field>
  ##        </rule>
  ##      </group>
  rules: { }
  
  ##
  ##
  ## decoders:
  ##    "decoder.miaou.xml": |
  ##      <decoder name="miaou">
  ##          <prematch>^{\s*"@programName"\s*:\s*"ZAP"</prematch>
  ##          <plugin_decoder>JSON_Decoder</plugin_decoder>
  ##      </decoder>
  ##      
  ##      <decoder name="miaou">
  ##          <parent>miaou</parent>
  ##          <regex type="pcre2">\"riskcode\".*?:.*?\"(.*?)\"</regex>
  ##          <order>riskcode</order>
  ##      </decoder>
  decoders: { }


##
##
configmaps: { }

##
##
secrets: { }


##
##
notification:
  ##
  ##
  slack:
    ##
    ##
    enabled: false
    ##
    ##
    webhookUrl: https://<example1>.slack.com/services/hooks/<example2>
    ##
    ##
    externalSecret: ~


##
##
integration:
  ##
  ## https://documentation.wazuh.com/current/cloud-security/azure/platform-and-services.html#getting-access-credentials-for-microsoft-azure-storage
  azure:
    ##
    ##
    workspace: ~
    ##
    ##
    domain: gisudm.onmicrosoft.com
    ##
    ##
    auth:
      ##
      ##
      log:
        ##
        ##
        application_id: ~
        ##
        ##
        application_key: ~
      ##
      ##
      graph:
        ##
        ##
        application_id: ~
        ##
        ##
        application_key: ~
      ##
      ##
      storage:
        ##
        ##
        account_name: ~
        ##
        ##
        account_key: ~


  ##
  ## https://documentation.wazuh.com/current/cloud-security/azure/storage.html
  github: [ ]
#    - ##
#      ##
#      secret: <PAT>
#      ##
#      ##
#      orgs:
#        - <ORG1>
#        - <ORG2>
  ##
  ## https://documentation.wazuh.com/current/user-manual/manager/integration-with-external-apis.html
  jira:
    ##
    ##
    enabled: true
    ##
    ##
    webhookUrl: https://<example1>.jira.com/services/hooks/<example2>
    ##
    ##
    apikey: 101010
    ##
    ##
    projectKey: WAZUH
    ##
    ##
    externalSecret: ~