# templates/tasks/scale-statefulset.yaml
# Unified scale task with both normal and emergency modes

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: scale-statefulset
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: scale-statefulset
  annotations:
    tekton.dev/displayName: "Scale StatefulSet (Unified)"
spec:
  description: |
    Unified StatefulSet scaling task that handles both normal operations and emergency recovery.
    
    Modes:
    - normal: Strict error handling, fails on errors (default)
    - emergency: Lenient error handling, always tries to recover, never fails
  params:
    - name: statefulsetName
      type: string
      description: "Name of the StatefulSet to scale."
    - name: namespace
      type: string
      description: "Namespace where the StatefulSet lives."
      default: {{ .Values.namespace | quote }}
    - name: replicas
      type: string
      description: "Target replica count."
    - name: mode
      type: string
      description: "Operation mode: 'normal' or 'emergency'"
      default: "normal"
    - name: componentName
      type: string
      description: "Component name for logging (used in emergency mode)"
      default: "unknown"
    - name: pipelineStatus
      type: string
      description: "Pipeline status for emergency mode logging"
      default: "Unknown"
  steps:
    - name: scale
      image: {{ .Values.tekton.tasks.scaleStatefulset.image | quote }}
      script: |
        # Set error handling based on mode
        if [ "${MODE}" = "emergency" ]; then
          # Emergency mode: lenient error handling
          set -eu
          echo "üö® EMERGENCY MODE: Lenient error handling active"
        else
          # Normal mode: strict error handling
          set -eux
          echo "‚öôÔ∏è  NORMAL MODE: Strict error handling active"
        fi
        
        echo "üîÑ Starting StatefulSet scaling operation"
        echo "StatefulSet: ${STATEFULSET_NAME}"
        echo "Namespace: ${NAMESPACE}"
        echo "Target Replicas: ${REPLICAS}"
        echo "Mode: ${MODE}"
        echo "Component: ${COMPONENT_NAME}"
        echo "Pipeline Status: ${PIPELINE_STATUS}"
        echo "Timestamp: $(date)"
        echo "================================"
        
        # Function for emergency mode error handling
        emergency_handle_error() {
          local error_msg="$1"
          local exit_code="$2"
          
          echo "‚ö†Ô∏è  Emergency mode error: $error_msg"
          echo "üí° Attempting recovery strategies..."
          
          # Don't exit in emergency mode - log and continue
          echo "üîÑ Continuing with emergency recovery..."
          return 0
        }
        
        # Function for normal mode error handling
        normal_handle_error() {
          local error_msg="$1"
          local exit_code="$2"
          
          echo "‚ùå Normal mode error: $error_msg"
          echo "üõë Failing pipeline due to error"
          exit "$exit_code"
        }
        
        # Unified error handler
        handle_error() {
          local error_msg="$1"
          local exit_code="${2:-1}"
          
          if [ "${MODE}" = "emergency" ]; then
            emergency_handle_error "$error_msg" "$exit_code"
          else
            normal_handle_error "$error_msg" "$exit_code"
          fi
        }
        
        # Check if StatefulSet exists
        echo "üîç Checking if StatefulSet exists..."
        if ! kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" >/dev/null 2>&1; then
          ERROR_MSG="StatefulSet ${STATEFULSET_NAME} not found in namespace ${NAMESPACE}"
          
          if [ "${MODE}" = "emergency" ]; then
            echo "‚ö†Ô∏è  $ERROR_MSG"
            echo "üîç Available StatefulSets in namespace:"
            kubectl get statefulsets -n "${NAMESPACE}" || echo "No StatefulSets found"
            echo "üîÑ Emergency mode: Continuing despite missing StatefulSet"
            echo "‚úÖ Emergency scaling completed (no action possible)"
            exit 0
          else
            echo "‚ùå $ERROR_MSG"
            echo "üîç Available StatefulSets:"
            kubectl get statefulsets -n "${NAMESPACE}"
            handle_error "$ERROR_MSG" 1
          fi
        fi
        
        # Get current state
        echo "üìä Checking current StatefulSet state..."
        CURRENT_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
        READY_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
        
        echo "üìä Current state:"
        echo "Current replicas: ${CURRENT_REPLICAS}"
        echo "Ready replicas: ${READY_REPLICAS}"
        echo "Target replicas: ${REPLICAS}"
        
        # Emergency mode: Check if scaling is actually needed
        if [ "${MODE}" = "emergency" ]; then
          if [ "${CURRENT_REPLICAS}" = "${REPLICAS}" ] && [ "${READY_REPLICAS}" = "${REPLICAS}" ]; then
            echo "‚úÖ StatefulSet is already correctly scaled (${READY_REPLICAS}/${REPLICAS})"
            echo "üéâ No emergency action needed - service is healthy!"
            echo ""
            echo "üìä Emergency Recovery Report:"
            echo "=============================="
            echo "StatefulSet: ${STATEFULSET_NAME}"
            echo "Component: ${COMPONENT_NAME}"
            echo "Pipeline Status: ${PIPELINE_STATUS}"
            echo "Final State: ${READY_REPLICAS}/${REPLICAS} (Healthy)"
            echo "Action Taken: None required"
            echo "Recovery Time: $(date)"
            echo "‚úÖ Emergency scaling completed successfully"
            exit 0
          else
            echo "‚ö†Ô∏è  StatefulSet needs emergency scaling!"
            echo "Current: ${CURRENT_REPLICAS}, Ready: ${READY_REPLICAS}, Target: ${REPLICAS}"
          fi
        fi
        
        # Perform scaling operation
        echo "üîß Scaling StatefulSet ${STATEFULSET_NAME} ‚Üí ${REPLICAS} replicas..."
        
        if ! kubectl scale statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" --replicas="${REPLICAS}"; then
          ERROR_MSG="Failed to scale StatefulSet ${STATEFULSET_NAME}"
          
          if [ "${MODE}" = "emergency" ]; then
            echo "‚ö†Ô∏è  $ERROR_MSG"
            echo "üîç StatefulSet details:"
            kubectl describe statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" || echo "Cannot describe StatefulSet"
            echo "üîÑ Emergency mode: Attempting alternative recovery..."
            
            # Try to get current state again
            RETRY_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "unknown")
            if [ "${RETRY_REPLICAS}" = "${REPLICAS}" ]; then
              echo "‚úÖ Scale command may have succeeded despite error"
            else
              echo "‚ùå Scale command definitely failed"
              echo "üí° Manual intervention may be required"
            fi
            
            # Don't exit in emergency mode - continue with status report
            echo "üîÑ Continuing with emergency recovery completion..."
          else
            echo "‚ùå $ERROR_MSG"
            echo "üîç StatefulSet details:"
            kubectl describe statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}"
            handle_error "$ERROR_MSG" 1
          fi
        else
          echo "‚úÖ Scale command executed successfully"
        fi
        
        # Wait for rollout if scaling up (and not in emergency mode with errors)
        if [ "${REPLICAS}" != "0" ]; then
          echo "‚è≥ Waiting for StatefulSet rollout to complete..."
          
          if [ "${MODE}" = "emergency" ]; then
            echo "üö® Emergency mode: Shorter timeout for rollout"
            TIMEOUT="180s"
          else
            echo "‚öôÔ∏è  Normal mode: Standard timeout for rollout"
            TIMEOUT="300s"
          fi
          
          echo "Timeout: ${TIMEOUT}"
          
          if kubectl rollout status statefulset/"${STATEFULSET_NAME}" -n "${NAMESPACE}" --timeout="${TIMEOUT}"; then
            echo "üéâ StatefulSet rollout completed successfully!"
          else
            ERROR_MSG="StatefulSet rollout timed out or failed"
            
            echo "‚ö†Ô∏è  $ERROR_MSG"
            echo "üîç Current pod status:"
            kubectl get pods -n "${NAMESPACE}" -l app.kubernetes.io/name="${STATEFULSET_NAME}" -o wide 2>/dev/null || echo "Cannot get pods"
            echo ""
            echo "üîç StatefulSet status:"
            kubectl describe statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" 2>/dev/null || echo "Cannot describe StatefulSet"
            
            if [ "${MODE}" = "emergency" ]; then
              echo "üö® Emergency mode: Checking if scaling succeeded despite timeout..."
              
              # Check final state
              FINAL_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
              FINAL_READY=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
              
              if [ "${FINAL_REPLICAS}" = "${REPLICAS}" ]; then
                echo "‚úÖ StatefulSet spec is correct (${FINAL_REPLICAS}/${REPLICAS}), pods may still be starting"
                echo "üîÑ Emergency mode: Considering this a partial success"
              else
                echo "‚ùå StatefulSet scaling failed completely in emergency mode"
                echo "üí° Manual intervention required"
              fi
            else
              echo "üí° Normal mode: Checking final state..."
              
              # Check final state
              FINAL_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
              FINAL_READY=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
              
              if [ "${FINAL_REPLICAS}" = "${REPLICAS}" ]; then
                echo "‚úÖ StatefulSet spec is correct, pods may still be starting"
                echo "üîÑ Continuing with pipeline..."
              else
                echo "‚ùå StatefulSet scaling failed completely"
                handle_error "$ERROR_MSG" 1
              fi
            fi
          fi
        else
          echo "‚è≥ Waiting for pods to terminate..."
          # Give some time for pods to terminate gracefully
          sleep 10
          
          REMAINING_PODS=$(kubectl get pods -n "${NAMESPACE}" -l app.kubernetes.io/name="${STATEFULSET_NAME}" --no-headers 2>/dev/null | wc -l)
          if [ "${REMAINING_PODS}" -eq 0 ]; then
            echo "‚úÖ All pods terminated successfully"
          else
            echo "‚ö†Ô∏è  ${REMAINING_PODS} pods still exist"
            kubectl get pods -n "${NAMESPACE}" -l app.kubernetes.io/name="${STATEFULSET_NAME}" 2>/dev/null || echo "Cannot list pods"
            
            if [ "${MODE}" = "normal" ]; then
              echo "üîÑ Normal mode: Continuing despite remaining pods..."
            else
              echo "üö® Emergency mode: Accepting partial termination..."
            fi
          fi
        fi
        
        # Final status report
        echo ""
        echo "üìä Final Status Report:"
        echo "======================"
        FINAL_REPLICAS=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "unknown")
        FINAL_READY=$(kubectl get statefulset "${STATEFULSET_NAME}" -n "${NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "unknown")
        
        echo "StatefulSet: ${STATEFULSET_NAME}"
        echo "Component: ${COMPONENT_NAME}"
        echo "Mode: ${MODE}"
        echo "Final Replicas: ${FINAL_REPLICAS}"
        echo "Ready Replicas: ${FINAL_READY}"
        echo "Target Replicas: ${REPLICAS}"
        echo "Pipeline Status: ${PIPELINE_STATUS}"
        
        if [ "${FINAL_REPLICAS}" = "${REPLICAS}" ]; then
          echo "Status: SUCCESS"
          echo "‚úÖ Scale operation completed successfully"
        else
          echo "Status: PARTIAL"
          if [ "${MODE}" = "emergency" ]; then
            echo "‚ö†Ô∏è  Emergency scaling completed with warnings"
            echo "üí° Manual verification recommended"
          else
            echo "‚ö†Ô∏è  Normal scaling completed with warnings"
          fi
        fi
        
        echo "Completed: $(date)"
        
        # Emergency mode: Always succeed to avoid failing the finally block
        if [ "${MODE}" = "emergency" ]; then
          echo ""
          echo "üö® Emergency mode: Task completed (never fails)"
          echo "‚úÖ Emergency scaling task finished"
          exit 0
        fi
        
        # Normal mode: Exit with success
        echo "‚úÖ Normal scaling task completed"
        
      env:
        - name: STATEFULSET_NAME
          value: "$(params.statefulsetName)"
        - name: NAMESPACE
          value: "$(params.namespace)"
        - name: REPLICAS
          value: "$(params.replicas)"
        - name: MODE
          value: "$(params.mode)"
        - name: COMPONENT_NAME
          value: "$(params.componentName)"
        - name: PIPELINE_STATUS
          value: "$(params.pipelineStatus)"