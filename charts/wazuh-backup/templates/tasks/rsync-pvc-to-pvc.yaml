# templates/tasks/rsync-pvc-to-pvc.yaml

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: rsync-pvc-to-pvc
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: rsync-pvc-to-pvc
  annotations:
    tekton.dev/displayName: "Rsync PVC to PVC"
spec:
  description: |
    Uses rsync to copy from a source PVC to a destination PVC workspace.
    This task is parameterized to work with any source PVC.
  params:
    - name: sourcePvcName
      type: string
      description: "Name of the source PVC to copy from"
    - name: sourcePath
      type: string
      description: "Relative path under the source PVC to copy from (e.g. 'data/')."
      default: ""
    - name: destinationPath
      type: string
      description: "Relative path under /backup to copy to (e.g. 'manager-backup/')."
      default: ""
  steps:
    - name: rsync
      image: "{{ .Values.tekton.tasks.rsync.image }}"
      script: |
        set -euxo pipefail

        SRC_DIR="/source/$(params.sourcePath)"
        DEST_DIR="/backup/$(params.destinationPath)"


        # 1. Source must exist
        if [[ ! -d "$SRC_DIR" ]]; then
          echo "‚ùå Source directory $SRC_DIR does not exist."
          exit 1
        fi

        # 2. Refuse to treat / (root) as either source or destination
        if [[ "$SRC_DIR" == "/" || "$DEST_DIR" == "/" ]]; then
          echo "‚ùå Refusing to use / as source or destination."
          exit 1
        fi

        # 3. Create destination if it is missing
        if [[ ! -d "$DEST_DIR" ]]; then
          echo "üìÇ Destination $DEST_DIR not found. Creating it‚Ä¶"
          mkdir -p "$DEST_DIR"
        fi

        echo "üì¶ Rsyncing from $SRC_DIR/ ‚Üí $DEST_DIR/"
        # -a : archive (recursive, preserve permissions/owners/timestamps, etc.)
        # -v : verbose (helps with Tekton log visibility)
        # -h : human-readable numbers
        # --delete : remove files in DEST that were deleted from SRC
        rsync -avh --delete "$SRC_DIR/" "$DEST_DIR/"
        echo "‚úÖ Rsync complete."

      volumeMounts:
        - name: source-volume
          mountPath: /source
        - name: destination-volume
          mountPath: /backup

  volumes:
    - name: source-volume
      persistentVolumeClaim:
        claimName: "$(params.sourcePvcName)"
    - name: destination-volume
      persistentVolumeClaim:
        claimName: {{ .Values.pvc.staging.name }}